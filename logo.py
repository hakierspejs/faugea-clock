import array


def _build_array(data):
    result = []
    for x, y in data:
        result.append(x)
        result.append(y)
    return array.array("h", result)


PATH_S = _build_array(
    (
        (19, 50),
        (0, 50),
        (3, 43),
        (6, 37),
        (21, 37),
        (35, 37),
        (37, 37),
        (38, 36),
        (38, 33),
        (38, 31),
        (38, 30),
        (37, 30),
        (22, 29),
        (8, 29),
        (5, 27),
        (3, 25),
        (2, 22),
        (1, 19),
        (1, 14),
        (1, 9),
        (2, 7),
        (3, 5),
        (5, 3),
        (6, 2),
        (10, 1),
        (13, 0),
        (30, 0),
        (48, 0),
        (44, 6),
        (41, 12),
        (27, 12),
        (13, 12),
        (12, 14),
        (11, 15),
        (11, 16),
        (11, 18),
        (12, 19),
        (13, 20),
        (27, 20),
        (41, 20),
        (44, 22),
        (46, 24),
        (48, 26),
        (49, 29),
        (49, 31),
        (50, 34),
        (49, 38),
        (48, 43),
        (46, 45),
        (44, 47),
        (42, 48),
        (39, 49),
    )
)


PATH_H = _build_array(
    (
        (6, 49),
        (4, 49),
        (2, 49),
        (0, 49),
        (0, 0),
        (12, 0),
        (13, 18),
        (37, 18),
        (37, 12),
        (37, 6),
        (37, 0),
        (50, 0),
        (50, 50),
        (45, 49),
        (41, 49),
        (37, 49),
        (37, 43),
        (37, 37),
        (37, 30),
        (13, 30),
        (12, 49),
        (10, 49),
        (6, 49),
        (0, 49),
    )
)


PATH_D = _build_array(
    (
        (15, 50),
        (0, 50),
        (0, 34),
        (0, 18),
        (6, 18),
        (12, 18),
        (12, 28),
        (12, 37),
        (21, 37),
        (30, 37),
        (33, 35),
        (35, 33),
        (36, 30),
        (38, 27),
        (38, 24),
        (38, 22),
        (36, 19),
        (35, 16),
        (32, 14),
        (29, 12),
        (15, 12),
        (0, 12),
        (0, 11),
        (4, 5),
        (7, 0),
        (19, 0),
        (30, 0),
        (34, 1),
        (37, 2),
        (40, 4),
        (43, 7),
        (45, 10),
        (47, 13),
        (48, 18),
        (50, 22),
        (49, 26),
        (49, 30),
        (48, 34),
        (46, 37),
        (44, 40),
        (42, 43),
        (40, 45),
        (37, 47),
        (34, 48),
        (30, 49),
    )
)


PATH_L = _build_array(
    (
        (20, 50),
        (0, 50),
        (0, 25),
        (0, 0),
        (7, 0),
        (14, 0),
        (14, 8),
        (14, 17),
        (25, 17),
        (36, 17),
        (33, 22),
        (29, 27),
        (22, 28),
        (14, 28),
        (14, 32),
        (14, 37),
        (32, 37),
        (50, 37),
        (50, 38),
        (45, 44),
        (41, 49),
    )
)


PATH_Z = _build_array(
    (
        (23, 50),
        (4, 50),
        (2, 48),
        (1, 46),
        (1, 44),
        (1, 41),
        (2, 39),
        (3, 38),
        (14, 27),
        (24, 15),
        (26, 14),
        (27, 13),
        (13, 12),
        (0, 12),
        (3, 6),
        (7, 0),
        (26, 0),
        (45, 0),
        (46, 1),
        (47, 2),
        (48, 4),
        (48, 6),
        (47, 8),
        (47, 10),
        (38, 20),
        (28, 30),
        (25, 33),
        (21, 36),
        (21, 37),
        (35, 37),
        (50, 36),
        (49, 38),
        (49, 39),
        (46, 44),
        (43, 50),
    )
)

# rectsize 5px
QRCODE = (
    (5, 5),
    (10, 5),
    (15, 5),
    (20, 5),
    (25, 5),
    (30, 5),
    (35, 5),
    (50, 5),
    (60, 5),
    (75, 5),
    (80, 5),
    (85, 5),
    (90, 5),
    (95, 5),
    (100, 5),
    (105, 5),
    (5, 10),
    (35, 10),
    (45, 10),
    (50, 10),
    (60, 10),
    (65, 10),
    (75, 10),
    (105, 10),
    (5, 15),
    (15, 15),
    (20, 15),
    (25, 15),
    (35, 15),
    (75, 15),
    (85, 15),
    (90, 15),
    (95, 15),
    (105, 15),
    (5, 20),
    (15, 20),
    (20, 20),
    (25, 20),
    (35, 20),
    (45, 20),
    (50, 20),
    (55, 20),
    (60, 20),
    (75, 20),
    (85, 20),
    (90, 20),
    (95, 20),
    (105, 20),
    (5, 25),
    (15, 25),
    (20, 25),
    (25, 25),
    (35, 25),
    (55, 25),
    (75, 25),
    (85, 25),
    (90, 25),
    (95, 25),
    (105, 25),
    (5, 30),
    (35, 30),
    (45, 30),
    (50, 30),
    (65, 30),
    (75, 30),
    (105, 30),
    (5, 35),
    (10, 35),
    (15, 35),
    (20, 35),
    (25, 35),
    (30, 35),
    (35, 35),
    (45, 35),
    (55, 35),
    (65, 35),
    (75, 35),
    (80, 35),
    (85, 35),
    (90, 35),
    (95, 35),
    (100, 35),
    (105, 35),
    (50, 40),
    (5, 45),
    (10, 45),
    (15, 45),
    (20, 45),
    (25, 45),
    (35, 45),
    (40, 45),
    (45, 45),
    (50, 45),
    (70, 45),
    (80, 45),
    (90, 45),
    (100, 45),
    (10, 50),
    (20, 50),
    (25, 50),
    (30, 50),
    (40, 50),
    (45, 50),
    (50, 50),
    (60, 50),
    (70, 50),
    (75, 50),
    (80, 50),
    (85, 50),
    (90, 50),
    (95, 50),
    (100, 50),
    (105, 50),
    (10, 55),
    (35, 55),
    (40, 55),
    (60, 55),
    (65, 55),
    (70, 55),
    (75, 55),
    (80, 55),
    (95, 55),
    (100, 55),
    (5, 60),
    (65, 60),
    (70, 60),
    (85, 60),
    (90, 60),
    (95, 60),
    (5, 65),
    (15, 65),
    (30, 65),
    (35, 65),
    (40, 65),
    (45, 65),
    (55, 65),
    (60, 65),
    (65, 65),
    (75, 65),
    (85, 65),
    (90, 65),
    (105, 65),
    (45, 70),
    (75, 70),
    (80, 70),
    (85, 70),
    (90, 70),
    (95, 70),
    (105, 70),
    (5, 75),
    (10, 75),
    (15, 75),
    (20, 75),
    (25, 75),
    (30, 75),
    (35, 75),
    (45, 75),
    (50, 75),
    (55, 75),
    (60, 75),
    (65, 75),
    (80, 75),
    (95, 75),
    (100, 75),
    (5, 80),
    (35, 80),
    (65, 80),
    (70, 80),
    (80, 80),
    (85, 80),
    (90, 80),
    (95, 80),
    (100, 80),
    (5, 85),
    (15, 85),
    (20, 85),
    (25, 85),
    (35, 85),
    (45, 85),
    (55, 85),
    (60, 85),
    (70, 85),
    (75, 85),
    (80, 85),
    (85, 85),
    (90, 85),
    (5, 90),
    (15, 90),
    (20, 90),
    (25, 90),
    (35, 90),
    (45, 90),
    (85, 90),
    (95, 90),
    (100, 90),
    (5, 95),
    (15, 95),
    (20, 95),
    (25, 95),
    (35, 95),
    (45, 95),
    (50, 95),
    (60, 95),
    (65, 95),
    (70, 95),
    (75, 95),
    (80, 95),
    (95, 95),
    (5, 100),
    (35, 100),
    (45, 100),
    (55, 100),
    (60, 100),
    (65, 100),
    (85, 100),
    (90, 100),
    (95, 100),
    (5, 105),
    (10, 105),
    (15, 105),
    (20, 105),
    (25, 105),
    (30, 105),
    (35, 105),
    (45, 105),
    (50, 105),
    (55, 105),
    (60, 105),
    (75, 105),
    (80, 105),
    (90, 105),
    (100, 105),
)


def draw_logo(vga, fbuf, offset_x=120, offset_y=40):
    padding = 10
    logo_size = 388
    small_square_size = 121
    margin = 6
    ell_margin = 8
    radius = 52
    ell_r = radius
    fbuf.rect(offset_x, offset_y, logo_size, logo_size, vga.COLOR_BLACK, True)
    for j in range(3):
        for i in range(3):
            fbuf.rect(
                margin + i * (small_square_size + margin) + offset_x,
                margin + j * (small_square_size + margin) + offset_y,
                small_square_size,
                small_square_size,
                vga.COLOR_RED,
                True,
            )
            if j == 2 or (i == 1 and j == 0) or (i == 2 and j == 1):
                fbuf.ellipse(
                    margin
                    + ell_margin
                    + i * (small_square_size + margin)
                    + ell_r
                    + offset_x,
                    margin
                    + ell_margin
                    + j * (small_square_size + margin)
                    + ell_r
                    + offset_y,
                    ell_r,
                    ell_r,
                    vga.COLOR_BLACK,
                    True,
                )
    letters = (
        (1, 0, PATH_H),
        (2, 1, PATH_S),
        (0, 2, PATH_L),
        (1, 2, PATH_D),
        (2, 2, PATH_Z),
    )
    for i, j, letter in letters:
        fbuf.poly(
            margin
            + ell_margin
            + i * (small_square_size + margin)
            + radius // 2
            + offset_x
            + 1,
            margin
            + ell_margin
            + j * (small_square_size + margin)
            + radius // 2
            + offset_y,
            letter,
            vga.COLOR_RED,
            True,
        )
    qr_offset_x = offset_x + 121 + 6 + 6 + 2
    qr_offset_y = offset_y + 121 + 6 + 6 + 2
    for x, y in QRCODE:
        fbuf.rect(x + qr_offset_x, y + qr_offset_y, 5, 5, vga.COLOR_BLACK, True)
